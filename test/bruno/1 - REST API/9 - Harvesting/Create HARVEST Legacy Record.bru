meta {
  name: Create HARVEST Legacy Record
  type: http
  seq: 2
}

post {
  url: {{host}}/default/rdmp/api/mint/harvest/rdmp
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  Authorization: Bearer {{token}}
}

script:pre-request {
  // Reuse harvestId if already set, else create one for legacy path
  var hid = bru.getEnvVar('harvestId');
  if(!hid) {
    hid = 'h' + Date.now().toString().slice(-8);
    bru.setEnvVar('harvestId', hid);
  }
}

body:json {
  {
    "records": [
        {
            "harvest_id": "{{harvestId}}",
            "metadata": {
                "data": {
                    "ID": "{{harvestId}}",
                    "GIVEN_NAME": "Ant",
                    "OTHER_NAMES": "",
                    "FAMILY_NAME": "S",
                    "PREF_NAME": "",
                    "HONORIFIC": "",
                    "EMAIL": "notAReal@email.edu.au",
                    "JOB_TITLE": "Assistant Professor",
                    "URI": "",
                    "NLA_PARTY_IDENTIFIER": "",
                    "ORCID": "0000-0001-7269-2286",
                    "PERSONAL_HOMEPAGE": "",
                    "STAFF_PROFILE_HOMEPAGE": "",
                    "DESCRIPTION": "",
                    "RESEARCH_ELEMENTS_USER_ID": "12345678",
                    "title": "Mock mint record type rdmp integration test",
                    "contributor_ci": {
                        "text_full_name": "Prof Ant Season",
                        "email": "notAReal@email.edu.au",
                        "orcid": "http://orcid.org/0000-0000-0000-000"
                    },
                    "contributor_data_manager": {
                        "text_full_name": "Prof Ant Season",
                        "email": "notAReal@email.edu.au",
                        "orcid": "http://orcid.org/0000-0000-0000-000"
                    }
                }
            }
        }
    ]
  }
}

tests {
  
  test("Status code is 200", function () {
      expect(res.getStatus()).to.equal(200);
  });
  
  test("Test harvest response structure", function () {
        var body = res.getBody();
        // Normalise to a single record object
        var rec = null;
        if (Array.isArray(body)) {
          rec = body[0];
        } else if (body && Array.isArray(body.records)) {
          rec = body.records[0];
        } else if (body) {
          rec = body;
        }
        expect(rec).to.be.an('object');
        expect(rec).to.have.property('oid');
        var expectedId = bru.getEnvVar('harvestId');
        // Some endpoints may return harvestId or harvest_id
        var returnedHarvestId = rec.harvestId || rec.harvest_id;
        expect(returnedHarvestId).to.equal(expectedId);
        if (rec.message) {
          var harvestId = expectedId;
          var allowed = ['Record created successfully','Record updated successfully'];
          var msgOk = allowed.indexOf(rec.message) !== -1 || /skip update of harvestId/i.test(rec.message) || (harvestId && rec.message.indexOf(harvestId) !== -1);
          expect(msgOk, 'Unexpected legacy harvest message: ' + rec.message).to.equal(true);
        }
  });
}
