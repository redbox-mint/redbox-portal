{
	"info": {
		"_postman_id": "363eaa2d-3707-4d81-811e-b0f3ace19590",
		"name": "Redbox Portal API - With tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "REST API",
			"item": [
				{
					"name": "Record Management",
					"item": [
						{
							"name": "Create RDMP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Test oid exists\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('oid');",
											"    postman.setEnvironmentVariable(\"dmpOid\", jsonData.oid);",
											"    var randomNumber = _.random(100);",
											"    postman.setEnvironmentVariable(\"randomNumber\", randomNumber);",
											"    postman.setEnvironmentVariable(\"researcherUsername\", \"researcheruser\" + randomNumber);",
											"    postman.setEnvironmentVariable(\"researcherEmail\", \"researcheruser\" + randomNumber + \"@email.edu.au\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Andrew's Postman test\",\n    \"dc:identifier\": \"http://purl.org/au-research/grants/nhmrc/566728\",\n    \"description\": \"Movement of molecules within cells by a process known as membrane transport is critical for normal cell function and also exploited by bacteria to promote infection. The pathway that connects the import pathway to the export pathway is essential for the function of a large number of proteins, however this connecting pathway is poorly characterised. This study will define the machinery of this trafficking pathway, which will provide the ability to modulate biological processes and cytotoxicity.\",\n    \"finalKeywords\": [\n        \"270199\",\n        \"Golgi apparatus\",\n        \"endocytosis\",\n        \"membrane transport\",\n        \"protein trafficking\",\n        \"secretion\",\n        \"HIV-AIDS\",\n        \"bacterial pathogen\",\n        \"hormone secretion\",\n        \"immune development\",\n        \"lysosomal storage disorder\"\n    ],\n    \"contributor_ci\": {\n        \"text_full_name\": \"Prof Paul Gleeson\",\n        \"email\": \"notAReal@email.edu.au\",\n        \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n    },\n    \"contributor_data_manager\": {\n        \"text_full_name\": \"Prof Paul Gleeson\",\n        \"email\": \"notAReal@email.edu.au\",\n        \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n    },\n    \"contributors\": [\n        {\n            \"text_full_name\": \"Prof Paul Gleeson\",\n            \"email\": \"notAReal@email.edu.au\",\n            \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n        }\n    ],\n    \"vivo:Dataset_redbox:DataCollectionMethodology\": \"The data collection methodology\",\n    \"vivo:Dataset_dc_format\": \"xls\",\n    \"vivo:Dataset_dc:location_rdf:PlainLiteral\": \"eResearch Store network drive\",\n    \"vivo:Dataset_dc:source_dc:location_rdf:PlainLiteral\": \"shared university network drive (e.g. G, H, etc)\",\n    \"vivo:Dataset_dc:extent\": \"100GB - 2TB\",\n    \"redbox:retentionPeriod_dc:date\": \"1year\",\n    \"dc:rightsHolder_dc:name\": \"myUni\",\n    \"dc:accessRights\": \"permission from the data manager\",\n    \"authorization\": []\n}"
								},
								"url": {
									"raw": "{{host}}/default/rdmp/api/records/metadata/rdmp",
									"host": [
										"{{host}}"
									],
									"path": [
										"default",
										"rdmp",
										"api",
										"records",
										"metadata",
										"rdmp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RDMP's Metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Title is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.title).to.eql(\"Andrew's Postman test\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}/default/rdmp/api/records/metadata/{{dmpOid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"default",
										"rdmp",
										"api",
										"records",
										"metadata",
										"{{dmpOid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RDMP's ObjectMetadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Type and Form is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.type).to.eql(\"rdmp\");",
											"    pm.expect(jsonData.form).to.eql(\"default-1.0-draft\");",
											"    postman.setEnvironmentVariable(\"brandId\", jsonData.brandId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}/default/rdmp/api/records/objectmetadata/{{dmpOid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"default",
										"rdmp",
										"api",
										"records",
										"objectmetadata",
										"{{dmpOid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update RDMP Metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test oid is equal to the requested oid value\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('oid');",
											"    pm.expect(jsonData.oid).to.eql(postman.getEnvironmentVariable(\"dmpOid\")); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Andrew's Postman test - Updated\",\n    \"dc:identifier\": \"http://purl.org/au-research/grants/nhmrc/566728\",\n    \"description\": \"Movement of molecules within cells by a process known as membrane transport is critical for normal cell function and also exploited by bacteria to promote infection. The pathway that connects the import pathway to the export pathway is essential for the function of a large number of proteins, however this connecting pathway is poorly characterised. This study will define the machinery of this trafficking pathway, which will provide the ability to modulate biological processes and cytotoxicity.\",\n    \"finalKeywords\": [\n        \"270199\",\n        \"Golgi apparatus\",\n        \"endocytosis\",\n        \"membrane transport\",\n        \"protein trafficking\",\n        \"secretion\",\n        \"HIV-AIDS\",\n        \"bacterial pathogen\",\n        \"hormone secretion\",\n        \"immune development\",\n        \"lysosomal storage disorder\"\n    ],\n    \"contributor_ci\": {\n        \"text_full_name\": \"Prof Paul Gleeson\",\n        \"email\": \"notAReal@email.edu.au\",\n        \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n    },\n    \"contributor_data_manager\": {\n        \"text_full_name\": \"Prof Paul Gleeson\",\n        \"email\": \"notAReal@email.edu.au\",\n        \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n    },\n    \"contributors\": [\n        {\n            \"text_full_name\": \"Prof Paul Gleeson\",\n            \"email\": \"notAReal@email.edu.au\",\n            \"orcid\": \"http://orcid.org/0000-0000-0000-000\"\n        }\n    ],\n    \"vivo:Dataset_redbox:DataCollectionMethodology\": \"The data collection methodology\",\n    \"vivo:Dataset_dc_format\": \"xls\",\n    \"vivo:Dataset_dc:location_rdf:PlainLiteral\": \"eResearch Store network drive\",\n    \"vivo:Dataset_dc:source_dc:location_rdf:PlainLiteral\": \"shared university network drive (e.g. G, H, etc)\",\n    \"vivo:Dataset_dc:extent\": \"100GB - 2TB\",\n    \"redbox:retentionPeriod_dc:date\": \"1year\",\n    \"dc:rightsHolder_dc:name\": \"myUni\",\n    \"dc:accessRights\": \"permission from the data manager\",\n    \"authorization\": []\n}"
								},
								"url": {
									"raw": "{{host}}/default/rdmp/api/records/metadata/{{dmpOid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"default",
										"rdmp",
										"api",
										"records",
										"metadata",
										"{{dmpOid}}"
									]
								},
								"description": "http://localhost:1500/default/rdmp/api/records/rdmp/create"
							},
							"response": []
						},
						{
							"name": "List RDMPs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"There is more than 1 RDMP record in the records\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.records.length).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"Check record has oid and metadata properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.records[0]).to.have.property(\"oid\")",
											"    pm.expect(jsonData.records[0]).to.have.property(\"metadata\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}/default/rdmp/api/records/list?recordType=rdmp",
									"host": [
										"{{host}}"
									],
									"path": [
										"default",
										"rdmp",
										"api",
										"records",
										"list"
									],
									"query": [
										{
											"key": "recordType",
											"value": "rdmp"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RDMP's Metadata - Updated Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Title is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.title).to.eql(\"Andrew's Postman test - Updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}/default/rdmp/api/records/metadata/{{dmpOid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"default",
										"rdmp",
										"api",
										"records",
										"metadata",
										"{{dmpOid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RDMP's Record Audit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.be.ok",
											"});",
											"",
											"pm.test(\"Number of found items is returned\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('summary')",
											"    and.to.have.property('numFound')",
											"      .and.equal(2)",
											"});",
											"",
											"pm.test(\"Results are returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.json()).to.have.property('records')",
											"      .and.to.have.property(0)",
											"      .and.to.have.property('redboxOid')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}/default/rdmp/api/records/audit/{{dmpOid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"default",
										"rdmp",
										"api",
										"records",
										"audit",
										"{{dmpOid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RDMP's Record Audit with Date filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.be.ok",
											"});",
											"",
											"pm.test(\"Zero items found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(pm.response.json()).to.have.property('summary')",
											"      .and.to.have.property('numFound')",
											"      .and.equal(0)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token}}"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}/default/rdmp/api/records/audit/{{dmpOid}}?dateFrom=2023&dateTo=2021",
									"host": [
										"{{host}}"
									],
									"path": [
										"default",
										"rdmp",
										"api",
										"records",
										"audit",
										"{{dmpOid}}"
									],
								"query": [
									{"key":"dateFrom","value":"2023"},
									{"key":"dateTo","value":"2021"}
								]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}