<% include('../../functions') %>
<!DOCTYPE html>
<html lang="<%= typeof lang !== 'undefined' ? lang : 'en' %>">

<head>
  <base href="<%= BrandingService.getRootContext() ? BrandingService.getRootContext() : '/'  %>">
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="apple-touch-icon" sizes="180x180" href="<%= BrandingService.getRootContext() %>/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="<%= BrandingService.getRootContext() %>/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="<%= BrandingService.getRootContext() %>/favicon-16x16.png">

  <title>
    <%=typeof title == 'undefined' ? TranslationService.t('default-title') : title%>
  </title>

  <!-- Google Fonts -->
  <link href='//fonts.googleapis.com/css?family=Titillium+Web:400,200,300,700,600' rel='stylesheet' type='text/css'>
  <link href='//fonts.googleapis.com/css?family=Roboto+Condensed:400,700,300' rel='stylesheet' type='text/css'>
  <link href='//fonts.googleapis.com/css?family=Raleway:400,100' rel='stylesheet' type='text/css'>


  <!-- Custom CSS -->
  <% if (req.query && req.query.previewToken) { %>
    <link rel="stylesheet" href="<%= BrandingService.getBrandAndPortalPath(req) %>/preview/<%= req.query.previewToken %>.css">
  <% } else { %>
  <link rel="stylesheet" href="<%= BrandingService.getBrandAndPortalPath(req) %>/styles/theme.css">
  <% } %>

  <!-- Current latest jQuery -->
  <script src="<%= BrandingService.getBrandAndPortalPath(req) %>/js/jquery.min.js"></script>
  <!-- Current latest Bootstrap JS  -->
  <script src="<%= BrandingService.getBrandAndPortalPath(req) %>/js/bootstrap.bundle.min.js"></script>


    <angular-bootstrap rootContext="<%= BrandingService.getRootContext() %>" ></angular-bootstrap>
</head>

<body>
  <div class="header-area">
    <div class="container">
      <div class="row">
        <div class="col-md-8">
          <div class="user-menu">
            <ul>
              <% if (!req.isAuthenticated())  { %>
                <li><a href="<%= BrandingService.getBrandAndPortalPath(req) %>/user/login"><i class="fa fa-user"></i><%= TranslationService.t('menu-login') %></a></li>
              <% } else { %>
                <li><i class="fa fa-user"></i>&nbsp;<%= TranslationService.t('menu-welcome-text') %>
                  <%= req.user.name %>
                </li>
                <li><a href="<%= BrandingService.getBrandAndPortalPath(req) %>/user/logout"><%= TranslationService.t('menu-logout') %></a></li>
              <% } %>

            </ul>
          </div>
        </div>
        <div class="col-md-4">
          <div class="mt-3" >
            <div class="dropdown pull-right">
                <% 
                  // Use available languages from the i18nLanguages policy
                  const languages = (typeof availableLanguages !== 'undefined' && availableLanguages) ? availableLanguages : [{ code: 'en', displayName: 'English' }];
                  if (languages.length > 1) { 
                    // Find current language display name
                    const currentLang = languages.find(l => l.code === lang) || languages[0];
                  %>
                  <a class="dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false">
                    <%= currentLang.displayName %>
                  </a>
                  <ul class="dropdown-menu">
                    <%
                    for (const language of languages) {
                      if (language.code !== lang) {
                        const langUrl = new URL(`${req.protocol}://${req.get('host')}${req.originalUrl}`);
                        const params = new URLSearchParams(langUrl.search);
                        params.set('lng', language.code);
                        langUrl.search = params;
                        %>
                        <li><a class="dropdown-item" href="<%= langUrl.toString() %>"><%= language.displayName %></a></li>
                        <%
                      }
                    } 
                  %>
                  </ul>
                    <% 
                  }
                %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- End header area -->

  <div class="site-branding-area">
    <div class="container">
      <div class="row">
        <% if(locals.branding != null && locals.portal != null) { %>
        <%- superPartial("/layout/logo.ejs", branding, portal, true) %>
        <% } else { %>
          <%- include('layout/logo.ejs') %>
        <%}%>

        <div class="col-sm-2 search-box">
        </div>
      </div>
    </div>
  </div>
  <!-- End site branding area -->
  <% if(locals.branding != null && locals.portal != null) { %>
  <%- superPartial("/layout/menu.ejs", branding, portal, true) %>
    <% } else { %>
    <%- include('layout/menu.ejs') %>
    <%}%>
  <!-- End mainmenu area -->
<% if (typeof title!== 'undefined') { %>
<% } %>
 
<% if (sails.config.brandingAware(BrandingService.getBrandFromReq(req)).systemMessage.enabled === true) { %>
  <div id="system-message-area" class="container">
  <div id="system-message" class="alert alert-primary alert-dismissible fade show" role="alert">
    <h4><%- sails.config.brandingAware(BrandingService.getBrandFromReq(req)).systemMessage.title %></h4>
    <div><%- sails.config.brandingAware(BrandingService.getBrandFromReq(req)).systemMessage.message %></div>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  </div>
</div>
 <% } %>

  <div class="maincontent-body">
    <%- body %>
  </div>



  <div class="footer-bottom-area navbar-bottom">
    <% if(locals.branding != null && locals.portal != null) { %>
      <%- superPartial("/layout/footer.ejs", branding, portal, true) %>
      <% } else { %>
        <%- include('layout/footer.ejs') %>
      <%}%>

  </div>

  
  <script <% if (contentSecurityPolicyNonce) {%>nonce="<%= contentSecurityPolicyNonce %>"<% } %>>
  document.addEventListener('DOMContentLoaded', function () {
    // Remove any pre-existing active classes from nav items
    document.querySelectorAll('li.active').forEach(function (li) {
      li.classList.remove('active');
    });

    // Helper to find the first anchor matching an exact path
    function findLinkByPath(path) {
      // Escape quotes and backslashes for safe selector usage
      var escapedPath = path.replace(/["\\]/g, '\\$&');
      return document.querySelector('a[href="' + escapedPath + '"]');
    }

    // Try to find and highlight the active navigation item
    var curHref = findLinkByPath(location.pathname);
    if (!curHref) {
      // Try progressively shorter paths if exact match fails
      var segments = location.pathname.split('/');
      for (var i = segments.length - 1; i > 0; i--) {
        var candidate = segments.slice(0, i).join('/');
        curHref = findLinkByPath(candidate);
        if (curHref) {
          break;
        }
      }
    }

    if (curHref) {
      var dropdown = curHref.closest('.dropdown');
      var li = curHref.closest('li');
      if (!dropdown) {
        if (li) {
          li.classList.add('nav-active-item');
        }
      } else {
        if (li) {
          li.classList.add('active');
        }
        dropdown.classList.add('nav-active-item');
      }
    }

    // System message show/hide and dismissal persistence
    var storedsystemMessageDismissalTime = parseInt(localStorage.getItem('systemMessageDismissalTime'), 10);
    var systemMessageArea = document.getElementById('system-message-area');

    if (systemMessageArea) {
      if (storedsystemMessageDismissalTime) {
        var currentsystemMessageDismissalTime = Date.now();
        var eightHoursInMillis = 8 * 60 * 60 * 1000; // 8 hours in milliseconds
        if (currentsystemMessageDismissalTime - storedsystemMessageDismissalTime > eightHoursInMillis) {
          // Show it (mirror jQuery .show())
          systemMessageArea.style.display = 'block';
        } else {
          // Remove the system message area as it takes up space even when hidden
          systemMessageArea.remove();
        }
      } else {
        // Ensure visible on first load
        systemMessageArea.style.display = 'block';
      }
    }

    var systemMessage = document.getElementById('system-message');
    if (systemMessage) {
      systemMessage.addEventListener('closed.bs.alert', function () {
        var currentEpochMillis = Date.now();
        localStorage.setItem('systemMessageDismissalTime', currentEpochMillis.toString());
        // Remove the system message area as it takes up space even when hidden
        var area = document.getElementById('system-message-area');
        if (area) {
          area.remove();
        }
      });
    }
  });
  </script>
</body>
</html>