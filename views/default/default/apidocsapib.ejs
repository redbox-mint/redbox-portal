FORMAT: 1A
HOST: https://demo.redboxresearchdata.com.au

# ReDBox Portal API 

The ReDBox Portal API provides authorized access to manage functions.


# Group Record

## Record Actions [/<%= branding %>/<%= portal %>/api/records/]

### List records in the system [GET /<%= branding %>/<%= portal %>/api/records/list{?packageType,recordType,sort,start,rows}]
+ Parameters
    + recordType: `rdmp` (string, required) - The record type name        
    + packageType: `rdmp` (string, optional) - The type of ReDBox package to return
    + sort: `date_object_modified:-1`(object, optional) - Sort results by this parameter.
        Parameter should be of the pattern `<property name>:<sort direction>` where sort direction is 1 for ascending order and -1 for descending order
        + Default: date_object_modified:-1
    + start: `0` (number, optional) - The index number for the first value to return from the result set.
        + Default: 0
    + rows: `10` (number,optional) - The number of records to return in the request
        + Default: 10

+ Request Get Records (application/json)
 
  + Headers
       
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
  + Attributes (ListResponse, fixed-type)
        - records (array[ListRecord])
           

+ Response 400 (application/json) 
    + Attributes (Error, fixed-type)
        - message: You have reached the maximum of request available; Max rows per request 10

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: An error has occurred

### Create Record [POST /<%= branding %>/<%= portal %>/api/records/metadata/{recordType}]
+ Parameters
  + recordType: `rdmp` (string, required) - The record type name
  

+ Request Create Record setting metadata, authorization and workflowStage (application/json)
  + Headers

            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

  + Body
    + Attributes (CreateRecordRequestFull, fixed-type)
        - metadata
            - title: A sample title
            - description: A description
        
+ Request Create Record only setting metadata (application/json)
  + Headers

            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

  + Body
    + Attributes (CreateRecordRequest, fixed-type)
        - metadata
            - title: A sample title
            - description: A description

+ Request Create Record setting metadata and workflowStage (application/json)
  + Headers

            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

  + Body
    + Attributes (CreateRecordRequestWithWorkflowStage, fixed-type)

        
+ Response 201 (application/json)
    + Headers

            Location: /default/rdmp/api/records/metadata/7e72b5952e8e323c77f72ae268a27c46
    + Body
    + Attributes (ObjectActionResponse, fixed-type)
        - message: Record created successfully


+ Response 400 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Record Type provided is not valid

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Create failed

### Transition record through workflow [POST /<%= branding %>/<%= portal %>/api/records/workflow/step/{workflowStage}/{oid}]
+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record
    + workflowStage: `queued` (string, required) - The workflow stage to transition the record to.
  

+ Request Transition record to queued workflow stage (application/json)
  + Headers

            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
        
+ Response 200 (application/json)
    + Body
    + Attributes (DatastreamResponse, fixed-type)

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Failed to transition workflow, please check server logs.

## Record Metadata Actions [/<%= branding %>/<%= portal %>/api/records/metadata/{oid}{?merge}]

### Update Record Metadata [PUT]

+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record
    + merge: `true` (boolean, optional) - When set to true, the post body is recursively merged with the existing metadata record.
        + Default: false

+ Request Update record metadata (application/json)
  + Headers

              Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
  + Body
    + Attributes (object, fixed-type)
        - title: A sample title
        - description: A sample description

+ Response 200 (application/json)
  + Attributes (ObjectActionResponse, fixed-type)
        - message: Record updated successfully

+ Response 400 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Update metadata failed, failed to retrieve existing record.

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Update Metadata failed

### Update Record Metadata [DELETE]

+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record

+ Request Update record metadata (application/json)
  + Headers

              Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
  

+ Response 200 (application/json)
  + Attributes (ObjectActionResponse, fixed-type)
        - message: Record deleted successfully

+ Response 400 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Delete metadata failed, failed to retrieve existing record.

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Delete Metadata failed

### Get Record Metadata [GET]

+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record


+ Request
  + Headers
    
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
  + Body
  
            {
                "title": "A sample title",
                "description": "A description"
            }

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Get Metadata failed, failed to retrieve existing record.

## Record Audit Actions [/<%= branding %>/<%= portal %>/api/records/audit]

### Get Record Audit Information [GET /<%= branding %>/<%= portal %>/api/records/audit/{oid}{?dateFrom,dateTo}]

+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record
    + dateFrom: `2023-02-14T00:44:26Z` (string, required) - Show modifications to the record from this date. ISO8601 format
    + dateTo: `2023-02-28T00:44:26Z` (string, required) - Show modifications to the record from this date. ISO8601 format



+ Request

    + Headers

                    Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
  

## Datastream Actions [/<%= branding %>/<%= portal %>/api/records/datastreams]

### Add attachment to record [POST /<%= branding %>/<%= portal %>/api/records/datastreams/{oid}]
+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record

+ Request (multipart/form-data; boundary={boundary value})
  + Headers
    
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

  + Body 

             --{boundary value}
            Content-Disposition: form-data; name="attachmentFields"; filename="researchdata.zip"
            Content-Type: application/zip
            Content-Transfer-Encoding: base64

            {file content}
            --{boundary value}
            
+ Response 200 (application/json)
  + Body
  + Attributes (DatastreamResponse, fixed-type)
        - message: Attachment added successfully

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Get Metadata failed, failed to retrieve existing record.

### List attachments in record [PUT /<%= branding %>/<%= portal %>/api/datastreams/{oid}]
+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record

+ Request Get Records (application/json)
 
  + Headers
       
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
  + Attributes (ListResponse, fixed-type)
        - records (array[Attachment])
           

+ Response 400 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Missing ID of record.

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Failed to list attachments, please check server logs.



## Record Permission Actions [/<%= branding %>/<%= portal %>/api/records/permissions]

### Give users edit access to record [POST /<%= branding %>/<%= portal %>/api/records/permissions/edit/{oid}]
+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record

+ Request Give users edit access to record (application/json)
  + Headers
    
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

  + Body
        
                {
                    "users": ["username1","username2"]
                }

+ Request Give users pending edit access to record. (application/json)
  + Headers
    
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
  + Body
  
                {
                    "usersPending": ["pendingusername1@email.com","pendingusername2@email.com"]
                }



+ Request Give users pending and immediate edit access to record (application/json)
  + Headers
    
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

    + Body
                
                {
                    "users": ["username1","username2"],
                    "usersPending": ["pendingusername1@email.com","pendingusername2@email.com"]
                }

+ Response 200 (application/json)
    + Attributes (CreateRecordAuthorization, fixed-type)
        - edit (array)
            - username1
            - username2
        - view (array)
            - username1
            - username2
        - editRoles (array)
            - Admin
        - viewRoles (array)
            - Admin

### Remove users edit access to record [DELETE /<%= branding %>/<%= portal %>/api/records/permissions/edit/{oid}]
+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record

+ Request Remove users edit access to record (application/json)
  + Headers

            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
  + Body

            {
                "users": ["username2"]
            }

+ Request Remove pending users edit access to record (application/json)
  + Headers

            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
 
  + Body
            
                {
                    "usersPending": ["pendingusername2@email.com"]
                }

+ Request Remove known users and pending users edit access to record (application/json)
  + Headers
            
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
  + Body
  
            {
                "users": ["username2"],
                "usersPending": ["pendingusername2@email.com"]
            }

+ Response 200 (application/json)
     + Attributes (CreateRecordAuthorization, fixed-type)
        - edit (array)
            - username1
        - view (array)
            - username1
            - username2
        - editRoles (array)
            - Admin
        - viewRoles (array)
            - Admin

### Give users view access to record [POST /<%= branding %>/<%= portal %>/api/records/permissions/view/{oid}]
+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record

+ Request Give users view access to record (application/json)
  + Headers
    
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

  + Body
        
                {
                    "users": ["username1","username2"]
                }

+ Request Give users pending view access to record. (application/json)
  + Headers
    
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
  + Body
  
                {
                    "usersPending": ["pendingusername1@email.com","pendingusername2@email.com"]
                }



+ Request Give users pending and immediate view access to record (application/json)
  + Headers
    
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

    + Body
                
                {
                    "users": ["username1","username2"],
                    "usersPending": ["pendingusername1@email.com","pendingusername2@email.com"]
                }

+ Response 200 (application/json)
    + Attributes (CreateRecordAuthorization, fixed-type)
        - edit (array)
            - username1
            - username2
        - view (array)
            - username1
            - username2
        - editRoles (array)
            - Admin
        - viewRoles (array)
            - Admin

### Remove users view access to record [DELETE /<%= branding %>/<%= portal %>/api/records/permissions/view/{oid}]
+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record

+ Request Remove users view access to record (application/json)
  + Headers

            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
  + Body

            {
                "users": ["username2"]
            }

+ Request Remove pending users view access to record (application/json)
  + Headers

            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
 
  + Body
            
                {
                    "usersPending": ["pendingusername2@email.com"]
                }

+ Request Remove known users and pending users view access to record (application/json)
  + Headers
            
            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
  + Body
  
            {
                "users": ["username2"],
                "usersPending": ["pendingusername2@email.com"]
            }

+ Response 200 (application/json)
    + Attributes (CreateRecordAuthorization, fixed-type)
        - edit (array)
            - username1
        - view (array)
            - username1
            - username2
        - editRoles (array)
            - Admin
        - viewRoles (array)
            - Admin

### Get access permissions for record [GET /<%= branding %>/<%= portal %>/api/records/permissions/{oid}]
+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record

+ Request
    + Headers

                Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
    + Attributes (CreateRecordAuthorization, fixed-type)

# Group Search

## Search Actions [/<%= branding %>/<%= portal %>/api/search]

### Search for records [GET /<%= branding %>/<%= portal %>/api/search{?searchStr}]
+ Parameters
    + searchStr: `query` (string, required) - The search string to query the index.

+ Request
    + Headers

                Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
    + Attributes (ListResponse, fixed-type)
        - records (array[ListRecord])  

### Reindex record [GET /<%= branding %>/<%= portal %>/api/search/index{?oid}]
+ Parameters
    + oid: `7e72b5952e8e323c77f72ae268a27c46` (string, required) - The identifier for the record.

+ Request
    + Headers

                Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
    + Attributes (ListResponse, fixed-type)
        - records (array[ListRecord])  

# Group User Management

## User Management Actions [/<%= branding %>/<%= portal %>/api/users]

### List users in the system [GET /<%= branding %>/<%= portal %>/api/users{?searchBy,query,start,rows}]
+ Parameters
    + start: `0` (number, optional) - The index number for the first value to return from the result set.
        + Default: 0
    + rows: `10` (number,optional) - The number of records to return in the request
        + Default: 10
    + searchBy: `type` (string, optional) - The attribute to search by. e.g. email
    + query: `local` (string, optional) - The value to query. Only exact matches.

+ Request
    + Headers

                Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
    + Attributes (ListResponse, fixed-type)
        - records (array[User])  

### Find user in the system [GET /<%= branding %>/<%= portal %>/api/users/get{?searchBy,query}]
+ Parameters
    + searchBy: `email` (string) - The attribute to search by. e.g. email
    + query: `localuser@redboxresearchdata.com.au` (string) - The value to query. Only exact matches.

+ Request
    + Headers

                Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
    + Attributes (User, fixed-type)



### Create Local User [PUT /<%= branding %>/<%= portal %>/api/users]

+ Request Create Local User (application/json)
  + Headers

              Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
  + Body
   + Attributes (CreateUser, fixed-type)

+ Response 200 (application/json)
  + Attributes (User, fixed-type)

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: User creation failed


### Update Local User [POST /<%= branding %>/<%= portal %>/api/users]

+ Request Create Local User (application/json)
  + Headers

              Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
  + Body
   + Attributes (UpdateUser, fixed-type)

+ Response 200 (application/json)
  + Attributes (User, fixed-type)
    

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: User update failed

### Generate API Token for user [GET /<%= branding %>/<%= portal %>/api/users/token/generate(?id}]

+ Parameters
    + id: `59daee5720b453050057c2f5` (string, required) - The user's identifier

+ Request Generate API Token for user (application/json)
  + Headers

              Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
  + Attributes (UserAPITokenResponse, fixed-type)
    
+ Response 400 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Unable to get user ID

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Token generation failed

### Revoke API Token for user [GET /<%= branding %>/<%= portal %>/api/users/token/revoke(?id}]

+ Parameters
    + id: `59daee5720b453050057c2f5` (string, required) - The user's identifier

+ Request Revoke API Token for user (application/json)
  + Headers

              Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
  + Attributes (UserAPITokenResponse, fixed-type)
        - token (string, nullable)

+ Response 400 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Unable to get user ID

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)
        - message: Token revocation failed


# Group Roles

## Role Actions [/<%= branding %>/<%= portal %>/api/roles]

### List System Roles [GET]

+ Request List configured System Roles (application/json)
  + Headers

              Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)
  + Attributes (ListResponse, fixed-type)
     - records (array[Role])

+ Response 500 (application/json) 
    + Attributes (Error, fixed-type)

# Group Other

## Email Actions [/<%= branding %>/<%= portal %>/api/sendNotification]

### Send an email [POST]

+ Request (application/json)
  + Headers

            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc
  + Body
  
            {
                "to": ["user@redboxresearchdata.com.au"],
                "subject":"A sample subject",
                "template": "emailTemplateName",
                "data": {"property": "values to populate in template"}
            }

+ Response 200 (application/json)
    + Attributes (ObjectActionResponse, fixed-type)

# Group Mint

The following APIs are for the Mint system used to manage records used in lookups in ReDBox. Like ReDBox, the Mint system is configurable so the record type and associated metadata required varies from system to system.

## Harvest records [/mint/api/v1.1/harvest/{record_type}]

### Harvest a set of records into Mint [POST]
+ Parameters
    + record_type: `Activities` (string, required) - The name of the configured record type in Mint.

+ Request (application/json)
  + Headers

            Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc      

  + Body 

                    {
                     "records": [
                         {
                           "harvest_id": "someSourceSystemIdentifierValue",
                              "metadata": {
                                  "TITLE": "Activity Title",
                                  "DESCRIPTION": "Activity Description"
                                }
                            }
                        ]
                    }

+ Response 200 (application/json)
    + Attributes (ObjectActionResponse, fixed-type)    

## Search Mint records [/mint/api/v1.1/search{?q}]
This endpoint is an authenticated wrapper to Apache solr's search endpoint and supports all the [basic common query parameters](https://solr.apache.org/guide/6_6/common-query-parameters.html).

### Search [GET]

+ Parameters
    + q: `query` (string, required) - The search string to query the index.

+ Request
    + Headers

                Authorization: Bearer abcabcab-abca-abca-abca-abcabcabcabc

+ Response 200 (application/json)


## Data Structures

### Error (object)
- message: An error has occurred - A string stating the error
- description - A description of the error

### ListResponse (object)
- summary 
    - numFound: 1 (required)
    - page: 1 (required)
    - start: 0 (required)
- records (array)

### ListRecord (object)
- oid: 7e72b5952e8e323c77f72ae268a27c46 (required)
- title: A sample record title (required)
- dateCreated: 2020-12-02T00:00:33.01Z (required)
- dateModified: 2020-12-02T00:00:33.01Z (required)
- metadata (object) - Record Metadata, this varies depending on the record type

### CreateRecordRequest (object)
- metadata (object) (required)

### CreateRecordRequestWithWorkflowStage (CreateRecordRequest)
- workflowStage: draft (optional)

### CreateRecordRequestFull (CreateRecordRequestWithWorkflowStage)
- authorization (CreateRecordAuthorization) (nullable)


### CreateRecordAuthorization (object)
- edit (array) (nullable)
    - username
- view (array) (nullable) 
    - username
- editRoles (array) (nullable)
    - Admin
- viewRoles (array) (nullable)
    - Admin


### ObjectActionResponse (object)
- message - Message describing action
- description - A description of the error
- oid: 7e72b5952e8e323c77f72ae268a27c46 (required)

### User (object)
- type: local
- name: Local user
- username: user1
- email: localuser@redboxresearchdata.com.au
- createdAt: `2017-10-09T03:34:47.660Z`
- updatedAt: `2017-11-20T04:08:33.061Z`
- id: 59daee5720b453050057c2f5

### CreateUser (object)
- name: Local user
- username: user1
- email: localuser@redboxresearchdata.com.au
- password: Password123!
- roles (array)
    - Guest
    - Researcher
    - Librarian
    - Admin

### UpdateUser (object)
- id: 59daee5720b453050057c2f5
- name: New Local user name (optional)
- password: Password123! (optional)
- roles (array) (optional)
    - Guest
    - Researcher
    - Librarian
    - Admin

### UserAPITokenResponse (object)
- id: 59daee5720b453050057c2f5
- username: user1
- token: aaf688be-0ade-4dbf-845c-d34d9f4cb4ac

### Role (object)
- name: Admin

### DatastreamResponse (object)
- message
- success: true (boolean)

### Attachment (object)
- filename: researchdata.zip