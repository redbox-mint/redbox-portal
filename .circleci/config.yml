jobs:
  build:
    docker:
      - image: 'cimg/node:24.2.0'
    resource_class: large
    steps:
      - checkout
      - run:
          name: Install npm packages and compile for core
          command: npm run compile:core
      - run:
          name: Install npm packages and compile for sails-ng-common
          command: npm run compile:sails-ng-common
      - run:
          name: Build generated api library for raido
          command: |
            mkdir /tmp/raido-gen
            cd /tmp/raido-gen/
            npm install @openapitools/openapi-generator-cli
            sudo apt-get update
            sudo apt-get install -y openjdk-17-jdk
            cd -
            cd support/raido
            npm init -y
            npm ci
            /tmp/raido-gen/node_modules/.bin/openapi-generator-cli generate -i https://raw.githubusercontent.com/au-research/raido/735df6f752f2e1ece7656d05b830b591dc259d03/api-svc/idl-raid-v2/src/raido-openapi-3.0.yaml -g typescript-axios -o ./src; node_modules/.bin/tsc   
      - run:
          name: Install npm packages and compile for project
          command: npm run compile:sails
      - run:
          name: Install nvm
          command: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
      - run:
          name: Compile angular
          command: |
            chmod +x support/build/compileProductionAngular.sh
            support/build/compileProductionAngular.sh
      - run:
          name: Compile legacy angular
          command: |
            chmod +x support/build/compileProductionAngularLegacy.sh
            support/build/compileProductionAngularLegacy.sh
      - run:
          name: Compile sails app using webpack
          command: npm run webpack
      - run:
          name: Build api descriptors
          command: |
            cd support/build/api-descriptors
            chmod +x ./generateAPIDescriptors.sh
            ./generateAPIDescriptors.sh
      - persist_to_workspace:
          root: .
          paths:
            - .
  build_without_angular:
    docker:
      - image: 'cimg/node:24.2.0'
    steps:
      - checkout
      - run:
          name: Install npm packages and compile for core
          command: npm run compile:core
      - run:
          name: Install npm packages and compile for sails-ng-common
          command: npm run compile:sails-ng-common
      - run:
          name: Install npm packages and compile for project
          command: npm run compile:sails
      - run:
          name: Compile sails app using webpack
          command: npm run webpack
      - persist_to_workspace:
          root: .
          paths:
            - .
  test-bruno-general:
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Install codecov
          command: |
            mkdir -p /tmp/.codecov-cli
            cd /tmp/.codecov-cli
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            curl -Os https://cli.codecov.io/latest/linux/codecov
            curl -Os https://cli.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://cli.codecov.io/latest/linux/codecov.SHA256SUM.sig
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x codecov
      - run:
          name: Setup test directories
          command: |
            sudo mkdir -p .tmp/junit/backend-bruno
            sudo mkdir -p .tmp/attachments/staging
            sudo chmod -R 777 .
      - run:
          name: Run Bruno General tests
          no_output_timeout: 30m
          command: timeout 1800s npm run test:bruno:general
      - run:
          name: Clean up Bruno containers
          command: npm run test:bruno:clean || true
          when: always
      - run:
          name: Upload Bruno General code coverage
          command: |
             /tmp/.codecov-cli/codecov --verbose upload-process --fail-on-error --disable-search \
              --token "${CODECOV_TOKEN}" --name "job-${CIRCLE_BUILD_NUM}-${CIRCLE_TAG:-$CIRCLE_BRANCH}" \
              --flag "backend-bruno-general" --file "./coverage/bruno-general/lcov.info" --branch "${CIRCLE_TAG:-$CIRCLE_BRANCH}"
          when: always
      - store_test_results:
          path: .tmp/junit
  test-bruno-oidc:
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Install codecov
          command: |
            mkdir -p /tmp/.codecov-cli
            cd /tmp/.codecov-cli
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            curl -Os https://cli.codecov.io/latest/linux/codecov
            curl -Os https://cli.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://cli.codecov.io/latest/linux/codecov.SHA256SUM.sig
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x codecov
      - run:
          name: Setup test directories
          command: |
            sudo mkdir -p .tmp/junit/backend-bruno
            sudo mkdir -p .tmp/attachments/staging
            sudo chmod -R 777 .
      - run:
          name: Run Bruno OIDC tests
          no_output_timeout: 30m
          command: timeout 1800s npm run test:bruno:oidc
      - run:
          name: Clean up Bruno containers
          command: npm run test:bruno:clean || true
          when: always
      - run:
          name: Upload Bruno OIDC code coverage
          command: |
             /tmp/.codecov-cli/codecov --verbose upload-process --fail-on-error --disable-search \
              --token "${CODECOV_TOKEN}" --name "job-${CIRCLE_BUILD_NUM}-${CIRCLE_TAG:-$CIRCLE_BRANCH}" \
              --flag "backend-bruno-oidc" --file "./coverage/bruno-oidc/lcov.info" --branch "${CIRCLE_TAG:-$CIRCLE_BRANCH}"
          when: always
      - store_test_results:
          path: .tmp/junit
  test-mocha:
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Install codecov
          command: |
            mkdir -p /tmp/.codecov-cli
            cd /tmp/.codecov-cli
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            curl -Os https://cli.codecov.io/latest/linux/codecov
            curl -Os https://cli.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://cli.codecov.io/latest/linux/codecov.SHA256SUM.sig
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x codecov
      - run:
          name: Setup test directories
          command: |
            sudo mkdir -p .tmp/junit/backend-mocha
            sudo mkdir -p .tmp/attachments/staging
            sudo chmod -R 777 .
      - run:
          name: Run Mocha tests
          no_output_timeout: 30m
          command: timeout 1800s npm run test:mocha
      - run:
          name: Upload Mocha code coverage
          command: |
             /tmp/.codecov-cli/codecov --verbose upload-process --fail-on-error --disable-search \
              --token "${CODECOV_TOKEN}" --name "job-${CIRCLE_BUILD_NUM}-${CIRCLE_TAG:-$CIRCLE_BRANCH}" \
              --flag "backend-mocha" --file "./coverage/mocha/lcov.info" --branch "${CIRCLE_TAG:-$CIRCLE_BRANCH}"
          when: always
      - store_test_results:
          path: .tmp/junit
  test-sails-ng-common:
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Install codecov
          command: |
            mkdir -p /tmp/.codecov-cli
            cd /tmp/.codecov-cli
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            curl -Os https://cli.codecov.io/latest/linux/codecov
            curl -Os https://cli.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://cli.codecov.io/latest/linux/codecov.SHA256SUM.sig
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x codecov
      - run:
          name: Install packages
          command: |
            cd ./packages/sails-ng-common
            npm ci
      - run:
          name: Run Mocha tests
          no_output_timeout: 30m
          command: |
            cd ./packages/sails-ng-common
            npm run pretest
            npx nyc --no-clean --report-dir ./coverage/sails-ng-common --reporter=lcov --exclude-after-remap=false \
              npx mocha --config test/unit/.mocharc.js --exit dist/test/unit/**/*.test.js
      - run:
          name: Upload Mocha code coverage
          command: |
            cd ./packages/sails-ng-common
            /tmp/.codecov-cli/codecov --verbose upload-process --fail-on-error --disable-search \
             --token "${CODECOV_TOKEN}" --name "job-${CIRCLE_BUILD_NUM}-${CIRCLE_TAG:-$CIRCLE_BRANCH}" \
             --flag "backend-sails-ng-common" --file "./coverage/sails-ng-common/lcov.info" --branch "${CIRCLE_TAG:-$CIRCLE_BRANCH}"
          when: always
      - store_test_results:
          path: packages/sails-ng-common/support/junit
  test-angular:
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Install codecov
          command: |
            mkdir -p /tmp/.codecov-cli
            cd /tmp/.codecov-cli
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            curl -Os https://cli.codecov.io/latest/linux/codecov
            curl -Os https://cli.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://cli.codecov.io/latest/linux/codecov.SHA256SUM.sig
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x codecov
      - run:
          name: Setup test directories
          command: |
            sudo mkdir -p .tmp/attachments/staging
            sudo chmod -R 777 .
      - run:
          name: Run Angular tests
          no_output_timeout: 30m
          command: |
            chmod +x support/unit-testing/angular/testAngular.sh
            source support/unit-testing/angular/testAngular.sh
      - run:
          name: Install npm packages for project
          command: |
            sudo chmod -R 777 .
            npm ci
  deploy:
    docker:
      - image: 'cimg/node:24.2.0'
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Build docker container
          command: |
            chmod +x dockerhub_deploy.sh
            ./dockerhub_deploy.sh
      - run:
          name: Upload container to Nexus
          command: |
            echo $CIRCLE_BRANCH
            npm pack
            PACKAGE_VERSION=$(cat package.json \
            | grep version \
            | head -1 \
            | awk -F: '{ print $2 }' \
            | sed 's/[", \t]//g')
            RBPORTAL_FILENAME=$(ls redbox-portal-*.tgz)
            curl -v -u $MAVEN_USER:$MAVEN_PASSWORD --upload-file $RBPORTAL_FILENAME "https://nexus-prod.redboxresearchdata.com.au/nexus/repository/maven-snapshots/au/edu/qcif/redbox-portal/${PACKAGE_VERSION}-SNAPSHOT/redbox-portal-${PACKAGE_VERSION}-SNAPSHOT.tgz"  
  generate-docs:
    machine:
      image: ubuntu-2004:current
    steps:
      - add_ssh_keys:
          fingerprints:
            - "50:0c:a1:7f:b6:64:84:42:01:61:0f:76:3f:e4:78:ff"
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Generate angular docs
          command: npm run doc-ng2
      - run:
          name: Deploy docs by adding commit to gh-pages branch
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ci-build@redboxresearchdata.com.au"
            git config user.name "ci-build"
            gh-pages --dotfiles --message "[ci skip] Updating documents" --dist support/docs/generated/ng2
orbs:
  node: circleci/node@4.0.0
  docker: circleci/docker@1.4.0
version: 2.1
workflows:
  build_test_gendocs_and_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore: /^dependabot.*/
      - test-bruno-general:
          requires:
            - build
      - test-bruno-oidc:
          requires:
            - build
      - test-mocha:
          requires:
            - build
      - test-sails-ng-common:
          requires:
            - build
      - test-angular:
          requires:
            - build
      - deploy:
          requires:
            - test-bruno-general
            - test-bruno-oidc
            - test-mocha
            - test-sails-ng-common
            - test-angular
          filters:
            branches:
              ignore: /^dependabot.*/
      - generate-docs:
          requires:
            - test-bruno-general
            - test-bruno-oidc
            - test-mocha
            - test-sails-ng-common
            - test-angular
          filters:
            branches:
              only: 'master'
  build_test_dependabot:
    jobs:
      - build:
          filters:
            branches:
              only: /^dependabot.*/
            tags:
              ignore: /.*/
      - test-bruno-general:
          requires:
            - build
      - test-bruno-oidc:
          requires:
            - build
      - test-mocha:
          requires:
            - build
      - test-sails-ng-common:
          requires:
            - build
      - test-angular:
          requires:
            - build
      - deploy:
          requires:
            - test-bruno-general
            - test-bruno-oidc
            - test-mocha
            - test-sails-ng-common
            - test-angular
          filters:
            branches:
              ignore: /^dependabot.*/
      - generate-docs:
          requires:
            - test-bruno-general
            - test-bruno-oidc
            - test-mocha
            - test-sails-ng-common
            - test-angular
          filters:
            branches:
              only: 'master'
  release_build_test_gendocs_and_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test-bruno-general:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test-bruno-oidc:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test-sails-ng-common:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test-mocha:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test-angular:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy:
          requires:
            - test-bruno-general
            - test-bruno-oidc
            - test-mocha
            - test-sails-ng-common
            - test-angular
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
